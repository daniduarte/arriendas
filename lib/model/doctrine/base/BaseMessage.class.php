<?php

/**
 * BaseMessage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property text $body
 * @property integer $conversation_id
 * @property timestamp $date
 * @property boolean $received
 * @property integer $user_id
 * @property Conversation $Conversation
 * @property User $User
 * 
 * @method integer      getId()              Returns the current record's "id" value
 * @method text         getBody()            Returns the current record's "body" value
 * @method integer      getConversationId()  Returns the current record's "conversation_id" value
 * @method timestamp    getDate()            Returns the current record's "date" value
 * @method boolean      getReceived()        Returns the current record's "received" value
 * @method integer      getUserId()          Returns the current record's "user_id" value
 * @method Conversation getConversation()    Returns the current record's "Conversation" value
 * @method User         getUser()            Returns the current record's "User" value
 * @method Message      setId()              Sets the current record's "id" value
 * @method Message      setBody()            Sets the current record's "body" value
 * @method Message      setConversationId()  Sets the current record's "conversation_id" value
 * @method Message      setDate()            Sets the current record's "date" value
 * @method Message      setReceived()        Sets the current record's "received" value
 * @method Message      setUserId()          Sets the current record's "user_id" value
 * @method Message      setConversation()    Sets the current record's "Conversation" value
 * @method Message      setUser()            Sets the current record's "User" value
 * 
 * @package    CarSharing
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMessage extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('Message');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('body', 'text', null, array(
             'type' => 'text',
             'notnull' => true,
             ));
        $this->hasColumn('conversation_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('date', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('received', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('date_answered', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('answered', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('looking_user_from', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 1,
             ));
        $this->hasColumn('looking_user_to', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 1,
             ));

        $this->index('id_UNIQUE', array(
             'fields' => 
             array(
              0 => 'id',
             ),
             'type' => 'unique',
             ));
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Conversation', array(
             'local' => 'conversation_id',
             'foreign' => 'id'));

        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));
    }
}