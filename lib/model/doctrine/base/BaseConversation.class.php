<?php

/**
 * BaseConversation
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property boolean $filed
 * @property integer $user_to_id
 * @property integer $user_from_id
 * @property timestamp $start
 * @property timestamp $end
 * @property User $UserTo
 * @property User $UserFrom
 * @property Doctrine_Collection $Message
 * 
 * @method integer             getId()           Returns the current record's "id" value
 * @method boolean             getFiled()        Returns the current record's "filed" value
 * @method integer             getUserToId()     Returns the current record's "user_to_id" value
 * @method integer             getUserFromId()   Returns the current record's "user_from_id" value
 * @method timestamp           getStart()        Returns the current record's "start" value
 * @method timestamp           getEnd()          Returns the current record's "end" value
 * @method User                getUserTo()       Returns the current record's "UserTo" value
 * @method User                getUserFrom()     Returns the current record's "UserFrom" value
 * @method Doctrine_Collection getMessage()      Returns the current record's "Message" collection
 * @method Conversation        setId()           Sets the current record's "id" value
 * @method Conversation        setFiled()        Sets the current record's "filed" value
 * @method Conversation        setUserToId()     Sets the current record's "user_to_id" value
 * @method Conversation        setUserFromId()   Sets the current record's "user_from_id" value
 * @method Conversation        setStart()        Sets the current record's "start" value
 * @method Conversation        setEnd()          Sets the current record's "end" value
 * @method Conversation        setUserTo()       Sets the current record's "UserTo" value
 * @method Conversation        setUserFrom()     Sets the current record's "UserFrom" value
 * @method Conversation        setMessage()      Sets the current record's "Message" collection
 * 
 * @package    CarSharing
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseConversation extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('Conversation');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('filed', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('user_to_id', 'integer', 4, array(
             'notnull' => true,
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('user_from_id', 'integer', 4, array(
             'notnull' => true,
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('start', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('end', 'timestamp', null, array(
             'type' => 'timestamp',
             ));

        $this->index('id_UNIQUE', array(
             'fields' => 
             array(
              0 => 'id',
             ),
             'type' => 'unique',
             ));
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('User as UserTo', array(
             'local' => 'user_to_id',
             'foreign' => 'id',
             'onDelete' => 'no action',
             'onUpdate' => 'no action'));

        $this->hasOne('User as UserFrom', array(
             'local' => 'user_from_id',
             'foreign' => 'id',
             'onDelete' => 'no action',
             'onUpdate' => 'no action'));

        $this->hasMany('Message', array(
             'local' => 'id',
             'foreign' => 'conversation_id'));
    }
}