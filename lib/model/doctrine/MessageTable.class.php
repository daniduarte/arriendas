<?php

/**
 * MessageTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class MessageTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object MessageTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Message');
    }

    public function findOpenToUserId($user_id){
      $q = Doctrine_Query::create()
        ->from("Message m, m.Conversation ")
        ->leftJoin("m.Conversation c")
        ->where("m.user_id != ? ",$user_id)
        ->andWhere("(c.user_to_id = $user_id OR c.user_from_id = $user_id)")
        ->andWhere("c.filed = 0")
        ->andWhere("m.received = 0");
      return $q->execute();
    }

    public function findOpenToUserId_byidConversation($user_id, $idconversation){
      $q = Doctrine_Query::create()
        ->from("Message m, m.Conversation ")
        ->leftJoin("m.Conversation c")
        ->where("c.id=$idconversation")
        ->andWhere("c.id=m.conversation_id")
        ->andWhere("((c.user_to_id=$user_id AND m.user_id!=$user_id) OR (c.user_from_id=$user_id AND m.user_id!=$user_id))")
        ->andWhere("m.received=0");
      return $q->execute();
    }

    public function findConversation($id){
      $q = Doctrine_Query::create()
        ->from("Message m ")
        ->where("m.conversation_id = ? ",$id)
        ->orderBy("m.date desc");
      return  $q->execute();
    }
    public function findReceived($user_id){
      $conversaciones = self::findOpenToUserId($user_id);
      $cids = array();
      foreach ($conversaciones as $c) {
          $cids[] = $c->getConversationId();
      }
      $cids = (count($cids) > 0 ) ? implode(",",$cids) : 0;
      $q = Doctrine_Query::create()
          ->from("Message m, m.Conversation ")
          ->leftJoin("m.Conversation c")
          ->andWhere("(c.user_to_id = $user_id OR c.user_from_id = $user_id)")
          ->andWhere("c.filed = 0")
          ->andWhere("c.id not in (".$cids.")")
          ->groupBy("m.conversation_id");
        return $q->execute();
    }
    public function findMensajesEnviados($user_id,$tipo){
        $q = Doctrine_Query::create()
        ->select('*')
        ->from("Message m")
        ->where("m.user_id = $user_id")
        ->andWhere("m.$tipo=1");
      return $q->execute();

    }
    public function findMensajesLeidos($user_id,$tipo){
      $q = Doctrine_Query::create()
        ->select('*')
        ->from("Message m, m.Conversation ")
        ->leftJoin("m.Conversation c")
        ->where("c.id=m.conversation_id")
        ->andWhere("((c.user_to_id=$user_id AND m.user_id!=$user_id) OR (c.user_from_id=$user_id AND m.user_id!=$user_id))")
        ->andWhere("m.received=1")
        ->andWhere("m.$tipo=1");
      return $q->execute();
    }
    public function findMensajesNoLeidos($user_id,$tipo){
      $q = Doctrine_Query::create()
        ->select('*')
        ->from("Message m, m.Conversation ")
        ->leftJoin("m.Conversation c")
        ->where("c.id=m.conversation_id")
        ->andWhere("((c.user_to_id=$user_id AND m.user_id!=$user_id) OR (c.user_from_id=$user_id AND m.user_id!=$user_id))")
        ->andWhere("m.received=0")
        ->andWhere("m.$tipo=1");
      return $q->execute();
    }
    public function findMensajesNoRespondidos_contraparte($user_id, $idconversation){
      $q = Doctrine_Query::create()
        ->select('*')
        ->from("Message m, m.Conversation ")
        ->leftJoin("m.Conversation c")
        ->where("c.id=m.conversation_id")
        ->andWhere("c.id=$idconversation")
        ->andWhere("((c.user_to_id=$user_id AND m.user_id!=$user_id) OR (c.user_from_id=$user_id AND m.user_id!=$user_id))")
        ->andWhere("m.answered=0");
      return $q->execute();
    }
    public function findTodosLosMensajes_contraparte($user_id, $idconversation){
      $q = Doctrine_Query::create()
        ->select('*')
        ->from("Message m, m.Conversation ")
        ->leftJoin("m.Conversation c")
        ->where("c.id=m.conversation_id")
        ->andWhere("c.id=$idconversation")
        ->andWhere("((c.user_to_id=$user_id AND m.user_id!=$user_id) OR (c.user_from_id=$user_id AND m.user_id!=$user_id))");
      return $q->execute();
    }
    public function findTodosMensajesDeLaConversacion($user_id, $idconversation,$usuario,$tipo){
      $q = Doctrine_Query::create()
        ->select('*')
        ->from("Message m, m.Conversation ")
        ->leftJoin("m.Conversation c")
        ->where("c.id=m.conversation_id")
        ->andWhere("c.id=$idconversation")
        ->andWhere("c.$usuario=$user_id")
        ->andWhere("m.$tipo=1");
      return $q->execute();
    }
    public function countByConversationId($id){
      $q = Doctrine_Query::create()
        ->select("count(m.id) as conversations")
        ->from("Message m")
        ->where("m.conversation = ? ",$id);
      $con = $q->fetchArray();
      return $con[0]["conversations"];
    }
    public function countNewsByUserId($user_id){
      $q = Doctrine_Query::create()
      ->from("Message m , m.Conversation ")
      ->leftJoin("m.Conversation c")
      ->where("(c.user_to_id = $user_id OR c.user_from_id = $user_id)")
      ->andWhere("m.user_id <> $user_id")
      ->andWhere("m.received = 0");
      return $q->count();
    }
	
	public function getUserConversation($idconversation, $user_id) {
			
		  $q = Doctrine_Query::create()
		  ->from("Message m")
		  ->where("m.conversation_id = ? ",$idconversation)
		  ->andWhere("m.user_id <> ?", $user_id)
		  ->orderBy("m.id desc")
		  ->limit(1);
		  $con = $q->fetchArray();
		  
		  return $receptor = Doctrine_Core::getTable('user')->find( $con[0]['user_id'] );
	}

    public function lastMessageByUserId($user_id,$cantMess){
      /*
       * $user_id   = usuario
       * $cantMess  = cantidad de mensajes a mostrar
       *
       * SELECT *
       * FROM Message AS m
       * JOIN Conversation AS c ON c.id = m.conversation_id
       *
       * WHERE c.user_to_id  = $user_id
       * OR c.user_from_id = $user_id
       * AND m.user_id <> $user_id
       *
       * ORDER BY m.date DESC LIMIT 0,5
       */
      $q = Doctrine_Query::create()
      ->from("Message m , m.Conversation ")
      ->leftJoin("m.Conversation c")
      ->where("(c.user_to_id = $user_id OR c.user_from_id = $user_id)")
      ->andWhere("m.user_id <> $user_id")
      ->andWhere("(c.user_to_id=$user_id AND m.looking_user_to=1) OR (c.user_from_id=$user_id AND m.looking_user_from=1)")
      ->orderBy("m.date desc")
      ->limit($cantMess);
      return $q->execute();
    }
    
    public function lastMessageSentByUserId($user_id){
      
        $q = Doctrine_Query::create()
            ->from("Message m , m.Conversation ")
            ->leftJoin("m.Conversation c")
            ->where("(c.user_to_id = $user_id OR c.user_from_id = $user_id)")
            ->andWhere("m.user_id = $user_id")
            ->andWhere("(c.user_to_id=$user_id AND m.looking_user_to=1) OR (c.user_from_id=$user_id AND m.looking_user_from=1)")
            ->orderBy("m.date desc");
        return $q->fetchOne();
    }
}
