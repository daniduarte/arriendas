<?php

/**
 * Car
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    CarSharing
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Car extends BaseCar
{
 
  //TODO
  public function ingresarCalificacion($idUsuario, $recomienda, $comentarioRecomienda, $desperfecto, $comentarioDesperfecto,
				       $limpieza, $comentarioGeneral) {
    
  }
  
  public function autoVerificado() {
    if($this->getSeguroOK()==4 OR $this->getSeguroOk()==3) {
      return true;
    } else {
      return false;
    }
  }
  public function getCantidadCalificacionesPositivas(){
      $q = Doctrine_Query::create()->from('Rating')
      ->where('Rating.Reserve.Car.Id = ?', $this->getId())
      ->andWhere('Rating.Op_recom_car = ?', 1);
      $ratings = $q->execute();
      return $ratings->count();
  }
  public function getTypeTransmission(){

  }
  
  public function getVerificacionOK() {
    if($this->getSeguroFotoFrente()==NULL ||
       $this->getSeguroFotoCostadoDerecho() == NULL ||
       $this->getSeguroFotoCostadoIzquierdo() == NULL ||
       $this->getSeguroFotoTraseroDerecho() == NULL ||
       $this->getLlantaDelDer() == NULL ||
       $this->getLlantaDelIzq() == NULL ||
       $this->getLlantaTraDer() == NULL ||
       $this->getLlantaTraIzq() == NULL ||
       $this->getTablero() == NULL ||
       $this->getRuedaRepuesto() ==  NULL ||
       $this->getPadron() == NULL ||
       $this->getFotoPadronReverso() == NULL) {
      return false;
    } else {
      return true;
    }
  }
  
  public function getMarcaModelo() {
    $modelo= Doctrine_Core::getTable("model")->findOneById($this->getModelId());
    $marca= Doctrine_Core::getTable("brand")->findOneById($modelo->getBrandId());
    return $marca->getName()." ".$modelo->getName();
  }
  

  public function getFoto() {
      sfContext::getInstance()->getConfiguration()->loadHelpers(array('Url'));
      $photo = $this->getFotoPerfil();
      if(is_null($photo)) {
	$idModelo= $this->getModelId();
	$query = "SELECT foto_defecto from Model WHERE id='".$idModelo."'";
	$rs = Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc($query);
	$photo= "http://admin.arriendas.cl/uploads/".$rs[0]['foto_defecto'];
	return $photo;
      } else {
	return $photo;
      }
  }

  public function getPhotoFile($type)
  {

      $q = Doctrine_Query::create()->from('Photo')
      ->where('Photo.Type = ?', $type)
      ->andWhere('Photo.Car.Id = ?', $this->getId());
      $photo = $q->fetchOne();
    
      if(!$photo) {
	//En este caso, no hay foto del auto. Cargamos la foto por defecto del modelo
	$q = Doctrine_Manager::getInstance()->getCurrentConnection()->getDbh();
        $query= "SELECT Model.foto_defecto FROM Model, Car WHERE Car.id='".$this->getId()."' AND Model.id=Car.model_id";
	$stmt= $q->prepare($query);
	$stmt->execute();
	$result= $stmt->fetchAll();
        $temp= new Photo();
	$temp->setPath("default_".$result[0]['foto_defecto']);
	return $temp;
      }
      
      return $photo;
    

  }
  
 public function getPositiveRatings()
  {

     $q = Doctrine_Query::create()->from('Rating')
      ->where('Rating.Reserve.Car.Id = ?', $this->getId())
	  ->andWhere('Rating.Qualified = ?', 1);
      $ratings = $q->execute();
	 

      return $ratings->count();

  }

    public function isAvailable($hour_from, $hour_to, $day_from, $day_to){
        $ia = Doctrine_Query::create()
            ->select('car_id')
            ->from('Availability av')
            ->where('av.hour_from < ? and av.hour_to > ? and av.date_from <= ? and av.date_to >= ? and av.car_id = ?', array($hour_from, $hour_to, $day_from, $day_to, $this->getId()))
            ->orWhere('av.hour_from < ? and av.hour_to > ? and av.date_from < ? and av.car_id = ?', array($hour_from, $hour_to, $day_from, $this->getId()))
            ->limit(1);
        if(count($ia->execute()) != 0)
        {
            return true;
        }

        return false;
    }

 public function hasReserve($startDate, $startDate, $endDate, $endDate)
  {
  
	/*echo "<pre>";
	echo "ID:" . $this->getId()."\n"; 
	echo "INdate:" . $startDate . "\n";
	echo "Indate:" . $endDate . "\n";
	echo "Reserves:" . count($this->getReserves()). "\n";
	  
	foreach ($this->getReserves() as $c) 
	{
			echo "Dates:" . $c->getDate()."\n"; 
	}
	*/

   $has_reserve = Doctrine_Core::getTable('Reserve')
	->createQuery('a')
	->where('  (
                    (a.date <= ? and date_add(a.date, INTERVAL a.duration HOUR) > ?) or 
                    (a.date <= ? and date_add(a.date, INTERVAL a.duration HOUR) > ?) or 
                    (a.date > ? and date_add(a.date, INTERVAL a.duration HOUR) < ?)
                ) and (a.Car.id = ?)', array($startDate, $startDate, $endDate, $endDate, $startDate, $endDate, $this->getId()))
	->fetchArray();
	
	//print_r(count($has_reserve));
  
	 if (count($has_reserve) == 0)
		return false;
	 else
		return true;
	 

  }

  public function getNombreComuna() {
        $q = Doctrine_Query::create()->from('Comunas')
                ->where('Comunas.codigoInterno = ?', $this->getComunaId());

        $comuna = $q->fetchOne();

      if(!is_object($comuna)) {
          return '';
      } else {
       return ucwords(strtolower($comuna->getNombre()));
      }
    }

    public function getAddressAprox(){
      $exp_frase=explode(" ",$this->getAddress());
      $num=count($exp_frase);

      for ($i=0,$k=0;$i<$num;$i++){
        if (is_numeric(trim($exp_frase[$i]))){
          $numeros[$k] = $exp_frase[$i];
          $k++;
        }
      }
      for($i=0;$i<count($numeros);$i++){
        $cant_dig = strlen($numeros[$i]);
        if($cant_dig>2){
          $numAux = substr($numeros[$i], 0, -2);
          $numAprox[$i] = $numAux."XX";
        }
      }
      $direccionAprox = "";
      for ($i=0;$i<$num;$i++){
        for($j=0;$j<count($numeros);$j++){
          if(trim($exp_frase[$i])==$numeros[$j]){
            if(isset($numAprox)) $exp_frase[$i] = $numAprox[$j];
            else $exp_frase[$i] = "";
          }
        }
        if($i==0) $direccionAprox = $exp_frase[$i];
        else $direccionAprox = $direccionAprox." ".$exp_frase[$i];
      }
      return $direccionAprox;
    }
}
